{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","list","setList","offSet","setOffSet","useEffect","fetch","then","response","json","data","_list","JSON","parse","stringify","push","results","catch","e","console","error","className","dataLength","length","next","hasMore","map","pokemon","header","image","url","split","filter","x","pop","name","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sQAqDeA,MA5Cf,WACE,MAA0BC,mBAAS,IAAnC,mBAAQC,EAAR,KAAcC,EAAd,KACA,EAA8BF,mBAAS,GAAvC,mBAAQG,EAAR,KAAgBC,EAAhB,KAsBA,OAZAC,qBAAU,WACRC,MAAM,GAAD,OAhBe,oCAgBf,kBAda,GAcb,mBAAqDH,IACzDI,MAAM,SAAAC,GACHA,EAASC,OAAOF,MAAK,SAAAG,GACnB,IAAIC,EAAQC,KAAKC,MAAMD,KAAKE,UAAUb,IACtCU,EAAMI,KAAN,MAAAJ,EAAK,YAASD,EAAKM,UACnBd,EAAQS,SAGbM,OAAM,SAAAC,GAAC,OAAIC,QAAQC,MAAMF,QACzB,CAACf,IAGF,sBAAKkB,UAAU,iBAAf,UACE,cAAC,IAAD,CACEC,WAAarB,EAAKsB,OAClBC,KAxBgB,WACpBpB,EAAUD,EANQ,KA8BdsB,SAAU,IAEZ,qBAAKJ,UAAU,WAAf,SACGpB,GAAQA,EAAKyB,KAAI,SAACC,GAAD,OAChB,cAAC,OAAD,CACEC,OAAQ,cAAC,YAAD,CAAWC,MAAK,UApCV,oGAoCU,QA1BZC,EA0BkDH,EAAQG,IAzBvEA,EAAIC,MAAM,KAAKC,QAAO,SAAAC,GAAC,MAAS,IAALA,KAASC,OAyBX,UAD1B,SAGE,6BAAKP,EAAQQ,SA5BF,IAACL,WCLTM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB/B,MAAK,YAAkD,IAA/CgC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b5725e8c.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport 'materialize-css';\nimport { Card, CardTitle } from 'react-materialize';\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport './App.css';\n\nconst POKEMON_API_URL = 'https://pokeapi.co/api/v2/pokemon';\nconst POKEMON_IMAGE_API = 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/';\nconst DEFAULT_LIMIT = 20;\nfunction App() {\n  const [ list, setList ] = useState([]);\n  const [ offSet, setOffSet ] = useState(0);\n\n  const loadMorePages = () => {\n    setOffSet(offSet+DEFAULT_LIMIT);\n  }\n\n  const getPokemonId = (url) => {\n    return url.split('/').filter(x => x != '').pop();\n  }\n\n  useEffect(() => {\n    fetch(`${POKEMON_API_URL}?limit=${DEFAULT_LIMIT}&offset=${offSet}`)\n    .then( response => {\n        response.json().then(data => {\n          let _list = JSON.parse(JSON.stringify(list));\n          _list.push(...data.results);\n          setList(_list);\n        });\n    })\n    .catch(e => console.error(e));\n  }, [offSet]);\n\n  return (\n    <div className=\"main-container\">\n      <InfiniteScroll\n        dataLength={ list.length }\n        next={ loadMorePages }\n        hasMore={ true }\n      ></InfiniteScroll>\n      <div className=\"card-box\">\n        {list && list.map((pokemon) => (\n          <Card\n            header={<CardTitle image={`${POKEMON_IMAGE_API}${getPokemonId(pokemon.url)}.png`}></CardTitle>}\n          >\n            <h3>{pokemon.name}</h3>\n          </Card>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}